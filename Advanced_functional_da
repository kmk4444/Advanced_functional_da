import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

pd.set_option("display.max_columns", None)
pd.set_option("display.width", 500)
df = sns.load_dataset("titanic")
df.head()

#############################
# 1. General Overview
#############################

#df.tail()
#df.info()
#df.shape
#df.info()
#df.columns
#df.index
#df.describe().T
#df.isnull().values.any()
#df.isnull().sum()
#df.dtypes

def check_df(dataframe, head=5):
    print("############### shape #############")
    print(dataframe.shape)
    print("############### types #############")
    print(dataframe.dtypes)
    print("############### head #############")
    print(dataframe.head())
    print("############### tail #############")
    print(dataframe.tail())
    print("############### NA #############")
    print(dataframe.isnull().sum())
    print("############### Quantiles #############")
    print(dataframe.describe([0, 0.05, 0.50, 0.95, 0.99, 1]).T)


check_df(df)

#############################
# 2. Analysis of categorical variables
#############################

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

pd.set_option("display.max_columns", None)
pd.set_option("display.width", 500)
df = sns.load_dataset("titanic")
df.head()

cat_cols = [col for col in df.columns if
            str(df[col].dtypes) in ["category", "object", "bool"]]  # we catch categorical variables.

num_but_cat = [col for col in df.columns if df[col].nunique() < 10 and df[col].dtypes in ["int", "float"]]

cat_but_car = [col for col in df.columns if df[col].nunique() > 20 and str(df[col].dtypes) in ["category",                                                                                             "object"]]  # şuan ver setinde olmadı, ama oladabilir.

cat_cols = cat_cols + num_but_cat

cat_cols = [col for col in cat_cols if col not in cat_but_car]

df[cat_cols].nunique()  # we test how many unique value

def cat_summary(dataframe, col_name, plot=False):  # create plot graph
    if df[col_name].dtypes == "bool":
        df[col_name] = df[col_name].astype(int)

        print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),
                            "Ratio": 100 * dataframe[col_name].value_counts() / len(dataframe)}))
        if plot:  # meaning that plot is true
            sns.countplot(x=dataframe[col_name], data=dataframe)
            plt.show(block=True)  # birden fazla döngüye girdiğimizde görsel olacağından dolayı block argümanına true dedik.

    else:
        print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),
                            "Ratio": 100 * dataframe[col_name].value_counts() / len(dataframe)}))
        if plot:
            sns.countplot(x=dataframe[col_name], data=dataframe)
            plt.show(block=True)


cat_summary(df, "adult_male", plot=True)

#for all categorical variables.
for col in cat_cols:
    cat_summary(df, col)


#############################
# 2. Analysis of Numerical Variables
#############################

num_cols = [col for col in df.columns if df[col].dtypes in ["int","float"]]
num_cols = [col for col in num_cols if col not in cat_cols]

def num_summary(dataframe, numerical_col, plot=False):
    quantiles = [0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.95, 0.99]
    print(dataframe[numerical_col].describe(quantiles).T)

    if plot:  # meaning that plot is true
        dataframe[numerical_col].hist()
        plt.xlabel(numerical_col)
        plt.title(numerical_col)
        plt.show(block=True)

for col in num_cols:
    num_summary(df, col, plot=True)


#############################
#Capturing Variables and Generalizing Operations
#############################
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

pd.set_option("display.max_columns", None)
pd.set_option("display.width", 500)
df = sns.load_dataset("titanic")
df.head()
df.info()

def grab_col_names(dataframe, cat_th=10, car_th=20):
    """
   Veri setindeki kategorik, numerik ve kategorik fakat kardinal değişkenlerin isimlerini verir.
   Parameters
   ----------
   dataframe: dataframe (type yazıyoruz)
         değişken isimleri alınmak isenen dataframe'dir.
   cat_th:int, float
        numerik fakat kategorik olan değişkenler için sınıf eşik değeri
   car_th: int, float
        kategorik fakat kardinal değişkenler için sınıf eşik değeri.
   Returns
   -------
        cat_cols: list
            kategorik değişken listesi
        num_cols: list
            numerik değişken listesi
        cat_but_car:list
            kategorik görünümlü kardinal değişken listesi
   Notes
   ------
    cat_cols + num_cols + cat_but_car = toplam değişken sayısı
    num_but_car cat_cols'un içerisinde.
    Return olan 3 liste toplamı toplam değişken sayısına eşittir: cat_cols + num_cols + cat_but_car
   """
    cat_cols = [col for col in df.columns if
                str(df[col].dtypes) in ["category", "object", "bool"]]  # we catch categorical variables.
    num_but_cat = [col for col in df.columns if df[col].nunique() < 10 and df[col].dtypes in ["int",
                                                                                              "float"]]  # we catch sinsirella categorical variables.
    cat_but_car = [col for col in df.columns if df[col].nunique() > 20 and str(df[col].dtypes) in ["category",
                                                                                                   "object"]]  # şuan ver setinde olmadı, ama oladabilir.
    cat_cols = cat_cols + num_but_cat
    cat_cols = [col for col in cat_cols if col not in cat_but_car]

    num_cols = [col for col in df.columns if df[col].dtypes in ["int", "float"]]
    num_cols = [col for col in num_cols if col not in cat_cols]

    print(f"Observation: {dataframe.shape[0]}")
    print(f"Variables: {dataframe.shape[1]}")
    print(f"cat_cols: {len(cat_cols)}")
    print(f"num_cols: {len(num_cols)}")
    print(f"Observation: {len(cat_but_car)}")
    print(f"Observation: {len(num_but_cat)}")

    return cat_cols, num_cols, cat_but_car  # we have stick out these values, therefore, we write return.


cat_cols, num_cols, cat_but_car = grab_col_names(df)

def cat_summary(dataframe, col_name, plot=False):  # create plot graph
    if df[col_name].dtypes == "bool":
        df[col_name] = df[col_name].astype(int)

        print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),
                            "Ratio": 100 * dataframe[col_name].value_counts() / len(dataframe)}))
        if plot:  # meaning that plot is true
            sns.countplot(x=dataframe[col_name], data=dataframe)
            plt.show(block=True)  # birden fazla döngüye girdiğimizde görsel olacağından dolayı block argümanına true dedik.

    else:
        print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),
                            "Ratio": 100 * dataframe[col_name].value_counts() / len(dataframe)}))
        if plot:
            sns.countplot(x=dataframe[col_name], data=dataframe)
            plt.show(block=True)


for col in cat_cols:
    cat_summary(df, col)


def num_summary(dataframe, numerical_col, plot=False):
    quantiles = [0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.95, 0.99]
    print(dataframe[numerical_col].describe(quantiles).T)

    if plot:  # meaning that plot is true
        dataframe[numerical_col].hist()
        plt.xlabel(numerical_col)
        plt.title(numerical_col)
        plt.show(block=True)

for col in num_cols:
    num_summary(df, col, plot=True)

#############################
# Analysis of Target Variables
#############################

#Analysis of Target Variables with Categorical Variables

def target_summary_with_cat(dataframe, target, categorical_col):
    print(pd.DataFrame({"TARGET_MEAN":dataframe.groupby(categorical_col)[target].mean()}))

for col in cat_cols:
    target_summary_with_cat(df,"survived",col)

#Analysis of Target Variables with Numerical Variables

def target_summary_with_num(dataframe, target, numerical_col):
    print(dataframe.groupby(target).agg({numerical_col:"mean"}),end="\n\n\n")

for col in num_cols:
    target_summary_with_num(df, "survived", col)

#############################
# Analysis of Correlation
#############################

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
pd.set_option('display.max_columns', None)
pd.set_option('display.width', 500)
df = pd.read_csv("WEEK_2/datasets/breast_cancer.csv")
df = df.iloc[:, 1:-1]
df.head()

num_cols = [col for col in df.columns if df[col].dtype in [int, float]]

corr = df[num_cols].corr()

sns.set(rc={'figure.figsize': (12, 12)})
sns.heatmap(corr, cmap="RdBu")
plt.show()

# Delete high correlation variables

cor_matrix = df.corr().abs() # for positive or negative correlations.

# 0 1 2
#0 1.000 0.11 0.12
#1 0.11 1.0000 0.42
#2 0.12 0.42 1.000

#we have to delete the same value (below)
#  0    1    2
#0 Nan 0.11 0.12
#1 Nan Nan 0.42
#2 Nan Nan Nan


# (np.triu(np.ones(cor_matrix.shape), k=1) birlerden oluşan yukarıda oluşturduğumuz matrix boyutunda numpy array oluşturuyoruz.
# daha sonra astype(np.bool)) fonksiyon ile numpy array' i bool'a çeviriyoruz.
# daha sonra yukarıdaki forma çevirmek için np.triu fonksiyonu kullanıyoruz.
# cor_matrix.where ile cor_matrixteki elemanları ekliyoruz. where eğer true koşulunu sağlıyorsa
#((np.triu(np.ones(cor_matrix.shape), k=1).astype(np.bool))) ekliyor.
#sütunlarda elemanlardan herhangi biri yüzde 90 dan büyükse sütundaki değişkeni sileceğiz.


upper_triangle_matrix = cor_matrix.where(np.triu(np.ones(cor_matrix.shape), k=1).astype(bool))
drop_list = [col for col in upper_triangle_matrix.columns if any(upper_triangle_matrix[col] > 0.90)]
cor_matrix[drop_list]
df.drop(drop_list, axis=1)


def high_correlated_cols(dataframe, plot=False, corr_th=0.90):
    corr = dataframe.corr()
    cor_matrix = corr.abs() #positive
    upper_triangle_matrix = cor_matrix.where(np.triu(np.ones(cor_matrix.shape), k=1).astype(bool))
    drop_list = [col for col in upper_triangle_matrix.columns if any(upper_triangle_matrix[col] > corr_th)]
    if plot:
        import seaborn as sns
        import matplotlib.pyplot as plt
        sns.set(rc={'figure.figsize': (15, 15)})
        sns.heatmap(corr, cmap="RdBu")
        plt.show()
    return drop_list

high_correlated_cols(df)
drop_list = high_correlated_cols(df, plot=True)# all variables
df.drop(drop_list, axis = 1)
high_correlated_cols(df.drop(drop_list, axis=1), plot= True)

